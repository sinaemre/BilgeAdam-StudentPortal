// <auto-generated />
using System;
using DataAccess.Context.IdentityContext;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace DataAccess.Context.IdentityContext.Migrations
{
    [DbContext(typeof(AppIdentityDbContext))]
    partial class AppIdentityDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("ApplicationCore.UserEntites.Concrete.AppRole", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("ConcurrencyStamp")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("5ba59a20-2057-4a8a-a417-80c119f79971"),
                            CreatedDate = new DateTime(2024, 12, 1, 13, 58, 55, 432, DateTimeKind.Local).AddTicks(482),
                            Name = "admin",
                            NormalizedName = "ADMIN",
                            Status = 1
                        },
                        new
                        {
                            Id = new Guid("bf6a5a19-2bc4-4e47-af9a-c52f4936cc4c"),
                            CreatedDate = new DateTime(2024, 12, 1, 13, 58, 55, 432, DateTimeKind.Local).AddTicks(517),
                            Name = "customerManager",
                            NormalizedName = "CUSTOMERMANAGER",
                            Status = 1
                        },
                        new
                        {
                            Id = new Guid("87fb18de-280e-48bc-abc7-80eef7448fe4"),
                            CreatedDate = new DateTime(2024, 12, 1, 13, 58, 55, 432, DateTimeKind.Local).AddTicks(520),
                            Name = "teacher",
                            NormalizedName = "TEACHER",
                            Status = 1
                        },
                        new
                        {
                            Id = new Guid("754ee8ce-7cd4-4ebb-989f-36d3de20772e"),
                            CreatedDate = new DateTime(2024, 12, 1, 13, 58, 55, 432, DateTimeKind.Local).AddTicks(523),
                            Name = "student",
                            NormalizedName = "STUDENT",
                            Status = 1
                        });
                });

            modelBuilder.Entity("ApplicationCore.UserEntites.Concrete.AppUser", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<DateTime>("BirthDate")
                        .HasColumnType("date");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("FirstPassword")
                        .HasColumnType("text");

                    b.Property<bool>("HasPasswordChanged")
                        .HasColumnType("boolean");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("5db9b8aa-54c3-4b7a-a102-b21207d6646c"),
                            AccessFailedCount = 0,
                            BirthDate = new DateTime(1990, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ConcurrencyStamp = "e95b66af-6cd2-452a-9f9f-d0c1d665b467",
                            CreatedDate = new DateTime(2024, 12, 1, 13, 58, 54, 792, DateTimeKind.Local).AddTicks(9416),
                            Email = "admin@bilgeadam.com",
                            EmailConfirmed = false,
                            FirstName = "Administrator",
                            HasPasswordChanged = true,
                            LastName = "Admin",
                            LockoutEnabled = false,
                            NormalizedEmail = "ADMIN@BILGEADAM.COM",
                            NormalizedUserName = "ADMIN",
                            PasswordHash = "AQAAAAIAAYagAAAAELSioSlYmcqZVb8yzPrHIL3XnzHvmpIXU3OSQZqg5kjL8pVGqZB+6+oCv9VJdeTkaA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "730ffc3e-af76-4b2f-8082-9660591bf751",
                            Status = 1,
                            TwoFactorEnabled = false,
                            UserName = "admin"
                        },
                        new
                        {
                            Id = new Guid("79c7f482-f112-4024-aa6c-05df190ce3ff"),
                            AccessFailedCount = 0,
                            BirthDate = new DateTime(1994, 5, 6, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ConcurrencyStamp = "07198550-34b3-4492-890b-e0efd4b963ff",
                            CreatedDate = new DateTime(2024, 12, 1, 13, 58, 54, 920, DateTimeKind.Local).AddTicks(9340),
                            Email = "pelin.ozerserdar@bilgeadam.com",
                            EmailConfirmed = false,
                            FirstName = "Pelin",
                            HasPasswordChanged = true,
                            LastName = "Özer Serdar",
                            LockoutEnabled = false,
                            NormalizedEmail = "PELIN.OZERSERDAR@BILGEADAM.COM",
                            NormalizedUserName = "PELIN.OZERSERDAR",
                            PasswordHash = "AQAAAAIAAYagAAAAENyjwk+diQBODRqXz/RPHQR1YBO1hrSsOfX2GwjNXX/kzaLMx19nM9STHG2AymciIA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "04b11b7f-2a77-4471-bb2f-5f41c0eba7e5",
                            Status = 1,
                            TwoFactorEnabled = false,
                            UserName = "pelin.ozerserdar"
                        },
                        new
                        {
                            Id = new Guid("f2d17592-2c75-4a38-a8db-07e13fc4778f"),
                            AccessFailedCount = 0,
                            BirthDate = new DateTime(1996, 1, 23, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ConcurrencyStamp = "6486ca52-3e01-4377-85bb-9f6fad39ef79",
                            CreatedDate = new DateTime(2024, 12, 1, 13, 58, 55, 47, DateTimeKind.Local).AddTicks(6924),
                            Email = "sinaemre.bekar@bilgeadam.com",
                            EmailConfirmed = false,
                            FirstName = "Sina Emre",
                            HasPasswordChanged = true,
                            LastName = "Bekar",
                            LockoutEnabled = false,
                            NormalizedEmail = "SINAEMRE.BEKAR@BILGEADAM.COM",
                            NormalizedUserName = "SINAEMRE.BEKAR",
                            PasswordHash = "AQAAAAIAAYagAAAAEO9nWRO4pTqV46EurTfvPZ5mVeoc09F8BQfgKEUNX6ntQ1XGPGpzkJVdIgMJj8rckA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "82f03c50-58b5-4b32-b6e8-d8a7062bdb9f",
                            Status = 1,
                            TwoFactorEnabled = false,
                            UserName = "sinaemre.bekar"
                        },
                        new
                        {
                            Id = new Guid("389a9486-374b-4a4b-85ef-b2faed25f907"),
                            AccessFailedCount = 0,
                            BirthDate = new DateTime(1996, 8, 8, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ConcurrencyStamp = "ee4af4cc-60ee-4a6a-b20d-19e92268ade6",
                            CreatedDate = new DateTime(2024, 12, 1, 13, 58, 55, 176, DateTimeKind.Local).AddTicks(5103),
                            Email = "perin.aycilsahin@bilgeadam.com",
                            EmailConfirmed = false,
                            FirstName = "Perin",
                            HasPasswordChanged = true,
                            LastName = "Aycil Şahin",
                            LockoutEnabled = false,
                            NormalizedEmail = "PERIN.AYCILSAHIN@BILGEADAM.COM",
                            NormalizedUserName = "PERIN.AYCILSAHIN",
                            PasswordHash = "AQAAAAIAAYagAAAAEFQ4EefLZMB3P6g+W02KfGpW8xjwRveFVE/VJE8hGI2im9+CyAblui7UNjeXRe+erg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "f381c499-8257-486d-bb99-c1d575ffa115",
                            Status = 1,
                            TwoFactorEnabled = false,
                            UserName = "perin.aycilsahin"
                        },
                        new
                        {
                            Id = new Guid("ca21aa0d-b8b7-433c-89f6-bc2480a694d1"),
                            AccessFailedCount = 0,
                            BirthDate = new DateTime(1985, 11, 3, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ConcurrencyStamp = "fc90c889-7624-4b62-8a01-71328f6f7dba",
                            CreatedDate = new DateTime(2024, 12, 1, 13, 58, 55, 300, DateTimeKind.Local).AddTicks(7366),
                            Email = "ahmet.cekic@bilgeadam.com",
                            EmailConfirmed = false,
                            FirstName = "Ahmet",
                            HasPasswordChanged = true,
                            LastName = "Çekiç",
                            LockoutEnabled = false,
                            NormalizedEmail = "AHMET.CEKIC@BILGEADAM.COM",
                            NormalizedUserName = "AHMET.CEKIC",
                            PasswordHash = "AQAAAAIAAYagAAAAEHMsTGoAphhPmYaAiA/EYI9KMwkT9xwKm6F6aoqEOvZZoyPSUEGszr2eBgpRvbJhDQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "b0432de1-f502-4a44-aa91-e81c5c9555e2",
                            Status = 1,
                            TwoFactorEnabled = false,
                            UserName = "ahmet.cekic"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("text");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uuid");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = new Guid("5db9b8aa-54c3-4b7a-a102-b21207d6646c"),
                            RoleId = new Guid("5ba59a20-2057-4a8a-a417-80c119f79971")
                        },
                        new
                        {
                            UserId = new Guid("79c7f482-f112-4024-aa6c-05df190ce3ff"),
                            RoleId = new Guid("bf6a5a19-2bc4-4e47-af9a-c52f4936cc4c")
                        },
                        new
                        {
                            UserId = new Guid("f2d17592-2c75-4a38-a8db-07e13fc4778f"),
                            RoleId = new Guid("87fb18de-280e-48bc-abc7-80eef7448fe4")
                        },
                        new
                        {
                            UserId = new Guid("389a9486-374b-4a4b-85ef-b2faed25f907"),
                            RoleId = new Guid("754ee8ce-7cd4-4ebb-989f-36d3de20772e")
                        },
                        new
                        {
                            UserId = new Guid("ca21aa0d-b8b7-433c-89f6-bc2480a694d1"),
                            RoleId = new Guid("754ee8ce-7cd4-4ebb-989f-36d3de20772e")
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.HasOne("ApplicationCore.UserEntites.Concrete.AppRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.HasOne("ApplicationCore.UserEntites.Concrete.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.HasOne("ApplicationCore.UserEntites.Concrete.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.HasOne("ApplicationCore.UserEntites.Concrete.AppRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ApplicationCore.UserEntites.Concrete.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.HasOne("ApplicationCore.UserEntites.Concrete.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
